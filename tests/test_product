import pytest
from fastapi.testclient import TestClient 

# test_product para criação
PRODUCT_DATA = {
    "name": "Smartphone XYZ",
    "description": "Um smartphone de última geração.",
    "price": 1200.50,
    "sale_price": 1100.00,
    "stock": 100
}

@pytest.fixture
def create_test_product(client: TestClient):
    # Cria um produto antes de cada teste que usa esta fixture
    response = client.post("/products/", json=PRODUCT_DATA)
    assert response.status_code == 200
    return response.json()

def test_create_product(client: TestClient):
    response = client.post("/products/", json=PRODUCT_DATA)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == PRODUCT_DATA["name"]
    assert data["price"] == PRODUCT_DATA["price"]
    assert "id" in data

def test_list_products(client: TestClient, create_test_product: dict):
    # create_test_product garante que há pelo menos um produto
    response = client.get("/products/")
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    assert len(data) > 0
    assert data[0]["name"] == PRODUCT_DATA["name"]

def test_get_product_by_id(client: TestClient, create_test_product: dict):
    product_id = create_test_product["id"]
    response = client.get(f"/products/{product_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == product_id
    assert data["name"] == PRODUCT_DATA["name"]

def test_get_product_not_found(client: TestClient):
    response = client.get("/products/99999") # ID que não existe
    assert response.status_code == 404
    assert response.json()["detail"] == "Produto não encontrado"

def test_update_product(client: TestClient, create_test_product: dict):
    product_id = create_test_product["id"]
    update_data = {
        "name": "Smartphone XYZ Pro",
        "stock": 120
    }
    response = client.put(f"/products/{product_id}", json=update_data)
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == product_id
    assert data["name"] == update_data["name"]
    assert data["stock"] == update_data["stock"]
    assert data["price"] == PRODUCT_DATA["price"] # Preço deve permanecer o mesmo se não foi atualizado

def test_update_product_not_found(client: TestClient):
    update_data = {"name": "NonExistent"}
    response = client.put("/products/99999", json=update_data)
    assert response.status_code == 404
    assert response.json()["detail"] == "Produto não encontrado para atualização"

def test_delete_product(client: TestClient, create_test_product: dict):
    product_id = create_test_product["id"]
    response = client.delete(f"/products/{product_id}")
    assert response.status_code == 204 # No Content
    
    # Tente buscar o produto deletado para confirmar que foi removido
    get_response = client.get(f"/products/{product_id}")
    assert get_response.status_code == 404

def test_delete_product_not_found(client: TestClient):
    response = client.delete("/products/99999")
    assert response.status_code == 404
    assert response.json()["detail"] == "Produto não encontrado para exclusão"